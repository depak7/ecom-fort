// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  STORE_OWNER
}

model Store {
  id               String   @id @default(uuid())
  name             String    @unique
  logo             String
  bannerImage      String?
  description      String
  offerDescription String?
  city             String
  address          String
  mapLink          String
  ownerId          String     @unique
  owner            User      @relation("StoreOwner", fields: [ownerId], references: [id])
  products         Product[]
  orderItems      OrderItem[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Decimal          @db.Decimal(10, 2)
  storeId     String
  store       Store            @relation(fields: [storeId], references: [id])
  variants    ProductVariant[]
  orderItems  OrderItem[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  variantId Int
  product   ProductVariant @relation(fields: [variantId], references: [id])
}

model ProductVariant {
  id        Int         @id @default(autoincrement())
  color     String
  sizes     VariantSize[]
  variantImage String
  images      ProductImage[]
  productId String
  product   Product     @relation(fields: [productId], references: [id])
}

model VariantSize {
  id        Int            @id @default(autoincrement())
  size      String
  stock     Int
  variantId Int
  variant   ProductVariant @relation(fields: [variantId], references: [id])
}

model User {
  id    String   @id @default(uuid())
  email    String   @unique
  name     String
  password String
  role     UserRole @default(CUSTOMER)
  orders   Order[]
  store    Store[]   @relation("StoreOwner")
}

model Order {
  id        String   @id @default(uuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  orderStatus    OrderStatus
  price     Decimal @db.Decimal(10, 2)
  storeId   String
  store     Store @relation(fields: [storeId],references: [id])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
